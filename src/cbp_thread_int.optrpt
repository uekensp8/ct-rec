インテル(R) 64 対応インテル(R) C++ コンパイラー (インテル(R) 64 対応アプリケーション用) バージョン 19.0.8.324 ビルド 20200220

コンパイラー・オプション: /O3 /DFloat=float /DWINDOWS /DFilter=Ramachandran /Qopt-report:5 /Qparallel /Qprec-div

    レポート: プロシージャー間の最適化 [ipo]

  プログラム全体 (SAFE) [いずれかのメソッド]: false
  プログラム全体 (SEEN) [テーブルメソッド]: false
  プログラム全体 (READ) [オブジェクト・リーダー・メソッド]: false

インライン展開オプション値:
  -Qinline-factor: 100
  -Qinline-min-size: 30
  -Qinline-max-size: 230
  -Qinline-max-total-size: 2000
  -Qinline-max-per-routine: 10000
  -Qinline-max-per-compile: 500000

インライン展開レポートの説明:
   "sz" はルーチンの "size" を指します。ルーチンのサイズが小さいほど
      インライン展開の可能性は高くなります。
   "isz" はルーチンの "inlined size" を指します。これは呼び出した
      ルーチンがインライン展開された場合の呼び出しルーチンのサイズです。
      コンパイラーは、一般にルーチンをインライン展開してルーチンのサイズを
      制限します。


最適化レポート開始: Ramachandran()

    レポート: プロシージャー間の最適化 [ipo]

インライン展開レポート: (Ramachandran()) [13/8=162.5%] F:\ct-rec\src\cbp_thread_int.c(66,1)


    レポート: コード生成の最適化 [cg]

F:\ct-rec\src\cbp_thread_int.c(66,1):リマーク #34051: レジスター割り当て: [Ramachandran] F:\ct-rec\src\cbp_thread_int.c:66

    ハードウェア・レジスター
        予約済み         :    2[ rsp rip]
        利用可能         :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        呼び出し先セーブ :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        割り当て済み     :    4[ rcx zmm0-zmm2]
        
    ルーチンの一時変数
        合計             :      27
            グローバル   :      20
            ローカル     :       7
        再生成           :       2
        退避             :       0
        
    ルーチンスタック
        変数             :       0 バイト*
            読み取り     :       0 [0.00e+000 ~ 0.0%]
            書き込み     :       0 [0.00e+000 ~ 0.0%]
        退避             :       0 バイト*
            読み取り     :       0 [0.00e+000 ~ 0.0%]
            書き込み     :       0 [0.00e+000 ~ 0.0%]
    
    注
    
        *オーバーラップしない変数と退避はスタック空間を共有できるため、
         合計スタックサイズはこれよりも小さくなる可能性があります。
    

===========================================================================

最適化レポート開始: Shepp()

    レポート: プロシージャー間の最適化 [ipo]

インライン展開レポート: (Shepp()) [14/8=175.0%] F:\ct-rec\src\cbp_thread_int.c(72,1)


    レポート: コード生成の最適化 [cg]

F:\ct-rec\src\cbp_thread_int.c(72,1):リマーク #34051: レジスター割り当て: [Shepp] F:\ct-rec\src\cbp_thread_int.c:72

    ハードウェア・レジスター
        予約済み         :    2[ rsp rip]
        利用可能         :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        呼び出し先セーブ :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        割り当て済み     :    4[ rcx zmm0-zmm2]
        
    ルーチンの一時変数
        合計             :      30
            グローバル   :       0
            ローカル     :      30
        再生成           :       3
        退避             :       0
        
    ルーチンスタック
        変数             :       0 バイト*
            読み取り     :       0 [0.00e+000 ~ 0.0%]
            書き込み     :       0 [0.00e+000 ~ 0.0%]
        退避             :       0 バイト*
            読み取り     :       0 [0.00e+000 ~ 0.0%]
            書き込み     :       0 [0.00e+000 ~ 0.0%]
    
    注
    
        *オーバーラップしない変数と退避はスタック空間を共有できるため、
         合計スタックサイズはこれよりも小さくなる可能性があります。
    

===========================================================================

最適化レポート開始: Chesler()

    レポート: プロシージャー間の最適化 [ipo]

インライン展開レポート: (Chesler()) [15/8=187.5%] F:\ct-rec\src\cbp_thread_int.c(78,1)


    レポート: コード生成の最適化 [cg]

F:\ct-rec\src\cbp_thread_int.c(78,1):リマーク #34051: レジスター割り当て: [Chesler] F:\ct-rec\src\cbp_thread_int.c:78

    ハードウェア・レジスター
        予約済み         :    2[ rsp rip]
        利用可能         :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        呼び出し先セーブ :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        割り当て済み     :    4[ rcx zmm0-zmm2]
        
    ルーチンの一時変数
        合計             :      36
            グローバル   :      23
            ローカル     :      13
        再生成           :       6
        退避             :       0
        
    ルーチンスタック
        変数             :       0 バイト*
            読み取り     :       0 [0.00e+000 ~ 0.0%]
            書き込み     :       0 [0.00e+000 ~ 0.0%]
        退避             :       0 バイト*
            読み取り     :       0 [0.00e+000 ~ 0.0%]
            書き込み     :       0 [0.00e+000 ~ 0.0%]
    
    注
    
        *オーバーラップしない変数と退避はスタック空間を共有できるため、
         合計スタックサイズはこれよりも小さくなる可能性があります。
    

===========================================================================

最適化レポート開始: FFT()

    レポート: プロシージャー間の最適化 [ipo]

実行されないスタティック関数: (FFT()) F:\ct-rec\src\cbp_thread_int.c(98,1)

===========================================================================

最適化レポート開始: CBP_thread()

    レポート: プロシージャー間の最適化 [ipo]

インライン展開レポート: (CBP_thread()) [17/8=212.5%] F:\ct-rec\src\cbp_thread_int.c(188,1)
  -> EXTERN: (193,26) floor(double)
  -> EXTERN: (193,32) ldexp(double, int)
  -> INLINE: (212,6) FFT() (isz = 158) (sz = 169)
  -> INLINE: (217,6) FFT() (isz = 158) (sz = 169)
  -> EXTERN: (222,5) ldexp(double, int)
  -> EXTERN: (232,37) floor(double)
  -> EXTERN: (239,32) floor(double)
  -> EXTERN: (239,38) ldexp(double, int)
  -> EXTERN: (239,44) sin(double)
  -> EXTERN: (240,18) floor(double)
  -> EXTERN: (240,24) ldexp(double, int)
  -> EXTERN: (240,30) cos(double)
  -> EXTERN: (256,5) ldexp(double, int)


    レポート: ループの入れ子、ベクトル、自動並列化の最適化 [loop, vec, par]


ループの開始 F:\ct-rec\src\cbp_thread_int.c(204,2)
   リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
   リマーク #17106: 並列依存関係: ANTI の依存関係が f[v] (205:2) と f[v][h] (205:22) の間に仮定されました。
   リマーク #17106: 並列依存関係: FLOW の依存関係が f[v][h] (205:22) と f[v] (205:2) の間に仮定されました。
   リマーク #15382: ベクトル化のサポート: 関数 ?1memset の呼び出しはベクトル化できません。   [ F:\ct-rec\src\cbp_thread_int.c(205,2) ]
   リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
   リマーク #15346: ベクトル依存関係: ANTI の依存関係が f[v] (205:2) と f[v][h] (205:22) の間に仮定されました。
   リマーク #15346: ベクトル依存関係: FLOW の依存関係が f[v][h] (205:22) と f[v] (205:2) の間に仮定されました。

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(205,2)
      リマーク #25408: memset が生成されました。
      リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
      リマーク #17106: 並列依存関係: ANTI の依存関係が f[v] (205:2) と f[v][h] (205:22) の間に仮定されました。
      リマーク #17106: 並列依存関係: FLOW の依存関係が f[v][h] (205:22) と f[v] (205:2) の間に仮定されました。
      リマーク #15398: ループ はベクトル化されませんでした: ループは memset または memcpy に変換されました。

      ループの開始 F:\ct-rec\src\cbp_thread_int.c(205,2)
         リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
         リマーク #17106: 並列依存関係: ANTI の依存関係が f[v] (205:22) と f[v][h] (205:22) の間に仮定されました。
         リマーク #17106: 並列依存関係: FLOW の依存関係が f[v][h] (205:22) と f[v] (205:22) の間に仮定されました。
         リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
         リマーク #15346: ベクトル依存関係: ANTI の依存関係が f[v] (205:22) と f[v][h] (205:22) の間に仮定されました。
         リマーク #15346: ベクトル依存関係: FLOW の依存関係が f[v][h] (205:22) と f[v] (205:22) の間に仮定されました。
         リマーク #25439: 剰余ありアンロール - 2  
         リマーク #25015: ループの最大トリップカウントの予測=24
      ループの終了

      ループの開始 F:\ct-rec\src\cbp_thread_int.c(205,2)
      <剰余>
         リマーク #25015: ループの最大トリップカウントの予測=24
      ループの終了
   ループの終了
ループの終了

ループの開始 F:\ct-rec\src\cbp_thread_int.c(207,2)
   リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
   リマーク #17106: 並列依存関係: OUTPUT の依存関係が z[l] (208:30) と q[n] (220:16) の間に仮定されました。
   リマーク #17106: 並列依存関係: OUTPUT の依存関係が q[n] (220:16) と z[l] (208:30) の間に仮定されました。
   リマーク #15542: ループ はベクトル化されませんでした: 内部ループがすでにベクトル化されています。

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(208,6)
      リマーク #17108: ループは並列化されませんでした: 計算量が不足しています。
      リマーク #15516: ループ はベクトル化されませんでした: 効率化のためベクトル長 1 を選択しました。vectorlength 句を含むプラグマ/ディレクティブでオーバーライドされます。
      リマーク #15475: --- ベクトルのコストサマリー開始 ---
      リマーク #15476: スカラーのコスト: 14 
      リマーク #15477: ベクトルのコスト: 4.000 
      リマーク #15478: スピードアップの期待値: 3.460 
      リマーク #15488: --- ベクトルのコストサマリー終了 ---
      リマーク #25439: 剰余ありアンロール - 2  
      リマーク #25456: ループで置換された配列参照スカラーの数: 1
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(208,6)
   <剰余>
      リマーク #25456: ループで置換された配列参照スカラーの数: 1
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(209,6)
   <ベクトル化のピールループ, マルチバージョン v1>
      リマーク #25015: ループの最大トリップカウントの予測=3
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(209,6)
   <マルチバージョン v1>
      リマーク #25228: データの依存関係のループをマルチバージョンにしました。
      リマーク #17108: ループは並列化されませんでした: 計算量が不足しています。
      リマーク #15388: ベクトル化のサポート: 参照 z[l] にアラインされたアクセスが含まれています。   [ F:\ct-rec\src\cbp_thread_int.c(209,54) ]
      リマーク #15388: ベクトル化のサポート: 参照 p[n] にアラインされたアクセスが含まれています。   [ F:\ct-rec\src\cbp_thread_int.c(209,48) ]
      リマーク #15305: ベクトル化のサポート: ベクトル長 4
      リマーク #15399: ベクトル化のサポート: アンロールファクターが 2 に設定されます。
      リマーク #15309: ベクトル化のサポート: 正規化されたベクトル化のオーバーヘッド 0.389
      リマーク #15417: ベクトル化のサポート: 浮動小数点数をアップコンバートします (単精度から倍精度 1)。   [ F:\ct-rec\src\cbp_thread_int.c(209,54) ]
      リマーク #15300: ループがベクトル化されました。
      リマーク #15442: すべてのループは剰余ループとして実行されます。
      リマーク #15448: マスクなしアライン・ユニット・ストライド・ロード: 1 
      リマーク #15449: マスクなしアライン・ユニット・ストライド・ストア: 1 
      リマーク #15475: --- ベクトルのコストサマリー開始 ---
      リマーク #15476: スカラーのコスト: 16 
      リマーク #15477: ベクトルのコスト: 4.500 
      リマーク #15478: スピードアップの期待値: 3.400 
      リマーク #15487: 型変換: 1 
      リマーク #15488: --- ベクトルのコストサマリー終了 ---
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(209,6)
   <代替アライメントでベクトル化されたループ, マルチバージョン v1>
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(209,6)
   <ベクトル化の剰余ループ, マルチバージョン v1>
      リマーク #15388: ベクトル化のサポート: 参照 z[l] にアラインされたアクセスが含まれています。   [ F:\ct-rec\src\cbp_thread_int.c(209,54) ]
      リマーク #15389: ベクトル化のサポート: 参照 p[n] にアラインされていないアクセスが含まれています。   [ F:\ct-rec\src\cbp_thread_int.c(209,48) ]
      リマーク #15381: ベクトル化のサポート: ループ本体内でアラインされていないアクセスが使用されました。
      リマーク #15305: ベクトル化のサポート: ベクトル長 2
      リマーク #15309: ベクトル化のサポート: 正規化されたベクトル化のオーバーヘッド 0.813
      リマーク #15417: ベクトル化のサポート: 浮動小数点数をアップコンバートします (単精度から倍精度 1)。   [ F:\ct-rec\src\cbp_thread_int.c(209,54) ]
      リマーク #15301: 剰余ループ がベクトル化されました。
      リマーク #15442: すべてのループは剰余ループとして実行されます。
      リマーク #15451: マスクなし非アライン・ユニット・ストライド・ストア: 1 
      リマーク #15452: マスクなしストライドロード: 1 
      リマーク #15475: --- ベクトルのコストサマリー開始 ---
      リマーク #15476: スカラーのコスト: 21 
      リマーク #15477: ベクトルのコスト: 20.500 
      リマーク #15478: スピードアップの期待値: 1.020 
      リマーク #15487: 型変換: 2 
      リマーク #15488: --- ベクトルのコストサマリー終了 ---
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(209,6)
   <ベクトル化の剰余ループ, マルチバージョン v1>
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(209,6)
   <マルチバージョン v2>
      リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
      リマーク #17106: 並列依存関係: FLOW の依存関係が z[l] (209:54) と p[n] (209:54) の間に仮定されました。
      リマーク #17106: 並列依存関係: ANTI の依存関係が p[n] (209:54) と z[l] (209:54) の間に仮定されました。
      リマーク #25427: ループ文の順序変更
      リマーク #15304: ループ はベクトル化されませんでした: マルチバージョンのベクトル化できないループ・インスタンスです。
      リマーク #25439: 剰余ありアンロール - 2  
      リマーク #25456: ループで置換された配列参照スカラーの数: 2
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(209,6)
   <剰余, マルチバージョン v2>
      リマーク #25456: ループで置換された配列参照スカラーの数: 2
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(210,6)
      リマーク #17108: ループは並列化されませんでした: 計算量が不足しています。
      リマーク #15516: ループ はベクトル化されませんでした: 効率化のためベクトル長 1 を選択しました。vectorlength 句を含むプラグマ/ディレクティブでオーバーライドされます。
      リマーク #15475: --- ベクトルのコストサマリー開始 ---
      リマーク #15476: スカラーのコスト: 13 
      リマーク #15477: ベクトルのコスト: 3.000 
      リマーク #15478: スピードアップの期待値: 4.280 
      リマーク #15488: --- ベクトルのコストサマリー終了 ---
      リマーク #25439: 剰余ありアンロール - 2  
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(210,6)
   <剰余>
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(104,2) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(212,6)
      リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
      リマーク #17106: 並列依存関係: ANTI の依存関係が z[j] (108:5) と z[k] (108:27) の間に仮定されました。
      リマーク #17106: 並列依存関係: FLOW の依存関係が z[k] (108:27) と z[j] (108:5) の間に仮定されました。
      リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
      リマーク #15346: ベクトル依存関係: ANTI の依存関係が z[j] (108:5) と z[k] (108:27) の間に仮定されました。
      リマーク #15346: ベクトル依存関係: FLOW の依存関係が z[k] (108:27) と z[j] (108:5) の間に仮定されました。

      ループの開始 F:\ct-rec\src\cbp_thread_int.c(105,24) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(212,6)
         リマーク #17102: ループは並列化されませんでした: 並列化候補ではありません。
         リマーク #15521: ループ はベクトル化されませんでした: ループ制御変数が識別されませんでした。ループを実行する前に反復数を計算できる式に置き換えるか、または OpenMP* 仕様  の標準ループ形式を使用してください。
      ループの終了
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(111,2) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(212,6)
      リマーク #17102: ループは並列化されませんでした: 並列化候補ではありません。
      リマーク #15521: ループ はベクトル化されませんでした: ループ制御変数が識別されませんでした。ループを実行する前に反復数を計算できる式に置き換えるか、または OpenMP* 仕様  の標準ループ形式を使用してください。

      ループの開始 F:\ct-rec\src\cbp_thread_int.c(112,6) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(212,6)
         リマーク #25096:  ループ交換は完了しませんでした: ループの入れ子が完全ではありません (ソースのいずれかまたは他のコンパイラー変換による)
         リマーク #25452: 元の順序はマージンが近いことを除けば適切です。
         リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
         リマーク #17106: 並列依存関係: ANTI の依存関係が e->x (113:3) と b->x (115:21) の間に仮定されました。
         リマーク #17106: 並列依存関係: FLOW の依存関係が b->x (115:21) と e->x (113:3) の間に仮定されました。
         リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
         リマーク #15346: ベクトル依存関係: ANTI の依存関係が e->x (113:3) と b->x (115:21) の間に仮定されました。
         リマーク #15346: ベクトル依存関係: FLOW の依存関係が b->x (115:21) と e->x (113:3) の間に仮定されました。

         ループの開始 F:\ct-rec\src\cbp_thread_int.c(114,3) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(212,6)
            リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
            リマーク #17106: 並列依存関係: ANTI の依存関係が *b (115:12) と a->y (116:34) の間に仮定されました。
            リマーク #17106: 並列依存関係: FLOW の依存関係が a->y (116:34) と *b (115:12) の間に仮定されました。
            リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
            リマーク #15346: ベクトル依存関係: ANTI の依存関係が *b (115:12) と a->y (116:34) の間に仮定されました。
            リマーク #15346: ベクトル依存関係: FLOW の依存関係が a->y (116:34) と *b (115:12) の間に仮定されました。
            リマーク #25456: ループで置換された配列参照スカラーの数: 1
         ループの終了
      ループの終了
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(214,6)
      リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
      リマーク #17106: 並列依存関係: OUTPUT の依存関係が (z+n*16)[_2] (215:3) と (z+n*16)[_2] (215:3) の間に仮定されました。
      リマーク #17106: 並列依存関係: OUTPUT の依存関係が (z+n*16)[_2] (215:3) と (z+n*16)[_2] (215:3) の間に仮定されました。
      リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
      リマーク #15346: ベクトル依存関係: OUTPUT の依存関係が (z+n*16)[_2] (215:3) と (z+n*16)[_2] (215:3) の間に仮定されました。
      リマーク #15346: ベクトル依存関係: OUTPUT の依存関係が (z+n*16)[_2] (215:3) と (z+n*16)[_2] (215:3) の間に仮定されました。

      ループの開始 F:\ct-rec\src\cbp_thread_int.c(215,3)
         リマーク #17108: ループは並列化されませんでした: 計算量が不足しています。
         リマーク #15389: ベクトル化のサポート: 参照 (z+n*16)[_2] にアラインされていないアクセスが含まれています。
         リマーク #15389: ベクトル化のサポート: 参照 (z+n*16)[_2] にアラインされていないアクセスが含まれています。
         リマーク #15381: ベクトル化のサポート: ループ本体内でアラインされていないアクセスが使用されました。
         リマーク #15335: ループ はベクトル化されませんでした: ベクトル化は可能ですが非効率です。オーバーライドするには vector always ディレクティブまたは /Qvec-threshold0 を使用してください。
         リマーク #15305: ベクトル化のサポート: ベクトル長 2
         リマーク #15427: ループが完全にアンロールされました。
         リマーク #15309: ベクトル化のサポート: 正規化されたベクトル化のオーバーヘッド 0.889
         リマーク #15450: マスクなし非アライン・ユニット・ストライド・ロード: 1 
         リマーク #15451: マスクなし非アライン・ユニット・ストライド・ストア: 1 
         リマーク #15475: --- ベクトルのコストサマリー開始 ---
         リマーク #15476: スカラーのコスト: 7 
         リマーク #15477: ベクトルのコスト: 4.500 
         リマーク #15478: スピードアップの期待値: 0.820 
         リマーク #15488: --- ベクトルのコストサマリー終了 ---
         リマーク #25436: 完全なアンロール - 2  
      ループの終了
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(104,2) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(217,6)
      リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
      リマーク #17106: 並列依存関係: ANTI の依存関係が z[j] (108:5) と z[k] (108:27) の間に仮定されました。
      リマーク #17106: 並列依存関係: FLOW の依存関係が z[k] (108:27) と z[j] (108:5) の間に仮定されました。
      リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
      リマーク #15346: ベクトル依存関係: ANTI の依存関係が z[j] (108:5) と z[k] (108:27) の間に仮定されました。
      リマーク #15346: ベクトル依存関係: FLOW の依存関係が z[k] (108:27) と z[j] (108:5) の間に仮定されました。

      ループの開始 F:\ct-rec\src\cbp_thread_int.c(105,24) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(217,6)
         リマーク #17102: ループは並列化されませんでした: 並列化候補ではありません。
         リマーク #15521: ループ はベクトル化されませんでした: ループ制御変数が識別されませんでした。ループを実行する前に反復数を計算できる式に置き換えるか、または OpenMP* 仕様  の標準ループ形式を使用してください。
      ループの終了
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(111,2) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(217,6)
      リマーク #17102: ループは並列化されませんでした: 並列化候補ではありません。
      リマーク #15521: ループ はベクトル化されませんでした: ループ制御変数が識別されませんでした。ループを実行する前に反復数を計算できる式に置き換えるか、または OpenMP* 仕様  の標準ループ形式を使用してください。

      ループの開始 F:\ct-rec\src\cbp_thread_int.c(112,6) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(217,6)
         リマーク #25096:  ループ交換は完了しませんでした: ループの入れ子が完全ではありません (ソースのいずれかまたは他のコンパイラー変換による)
         リマーク #25452: 元の順序はマージンが近いことを除けば適切です。
         リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
         リマーク #17106: 並列依存関係: ANTI の依存関係が *e (113:11) と a->y (116:34) の間に仮定されました。
         リマーク #17106: 並列依存関係: FLOW の依存関係が a->y (116:34) と *e (113:11) の間に仮定されました。
         リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
         リマーク #15346: ベクトル依存関係: ANTI の依存関係が *e (113:11) と a->y (116:34) の間に仮定されました。
         リマーク #15346: ベクトル依存関係: FLOW の依存関係が a->y (116:34) と *e (113:11) の間に仮定されました。

         ループの開始 F:\ct-rec\src\cbp_thread_int.c(114,3) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(217,6)
            リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
            リマーク #17106: 並列依存関係: ANTI の依存関係が *b (115:12) と a->y (116:34) の間に仮定されました。
            リマーク #17106: 並列依存関係: FLOW の依存関係が a->y (116:34) と *b (115:12) の間に仮定されました。
            リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
            リマーク #15346: ベクトル依存関係: ANTI の依存関係が *b (115:12) と a->y (116:34) の間に仮定されました。
            リマーク #15346: ベクトル依存関係: FLOW の依存関係が a->y (116:34) と *b (115:12) の間に仮定されました。
            リマーク #25456: ループで置換された配列参照スカラーの数: 1
         ループの終了
      ループの終了
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(219,6)
      リマーク #17108: ループは並列化されませんでした: 計算量が不足しています。
      リマーク #15389: ベクトル化のサポート: 参照 q[n] にアラインされていないアクセスが含まれています。   [ F:\ct-rec\src\cbp_thread_int.c(220,16) ]
      リマーク #15381: ベクトル化のサポート: ループ本体内でアラインされていないアクセスが使用されました。
      リマーク #15328: ベクトル化のサポート: 非ユニットストライド ロードがエミュレートされました (変数 <z->x[n]>、ストライドは 2)   [ F:\ct-rec\src\cbp_thread_int.c(220,21) ]
      リマーク #15305: ベクトル化のサポート: ベクトル長 2
      リマーク #15399: ベクトル化のサポート: アンロールファクターが 4 に設定されます。
      リマーク #15309: ベクトル化のサポート: 正規化されたベクトル化のオーバーヘッド 0.146
      リマーク #15418: ベクトル化のサポート: 浮動小数点数をダウンコンバートします (倍精度から単精度 1)。   [ F:\ct-rec\src\cbp_thread_int.c(220,16) ]
      リマーク #15417: ベクトル化のサポート: 浮動小数点数をアップコンバートします (単精度から倍精度 1)。   [ F:\ct-rec\src\cbp_thread_int.c(195,16) ]
      リマーク #15300: ループがベクトル化されました。
      リマーク #15451: マスクなし非アライン・ユニット・ストライド・ストア: 1 
      リマーク #15452: マスクなしストライドロード: 1 
      リマーク #15475: --- ベクトルのコストサマリー開始 ---
      リマーク #15476: スカラーのコスト: 21 
      リマーク #15477: ベクトルのコスト: 20.500 
      リマーク #15478: スピードアップの期待値: 1.020 
      リマーク #15487: 型変換: 2 
      リマーク #15488: --- ベクトルのコストサマリー終了 ---
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(219,6)
   <ベクトル化の剰余ループ>
   ループの終了
ループの終了

ループの開始 F:\ct-rec\src\cbp_thread_int.c(229,2)
   リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
   リマーク #17106: 並列依存関係: FLOW の依存関係が z[n+1] (232:26) と z[n1-1+1] (248:3) の間に仮定されました。
   リマーク #17106: 並列依存関係: ANTI の依存関係が z[n1-1+1] (248:3) と z[n+1] (232:26) の間に仮定されました。
   リマーク #15542: ループ はベクトル化されませんでした: 内部ループがすでにベクトル化されています。

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(232,6)
   <ベクトル化のピールループ>
      リマーク #25015: ループの最大トリップカウントの予測=3
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(232,6)
      リマーク #17108: ループは並列化されませんでした: 計算量が不足しています。
      リマーク #15388: ベクトル化のサポート: 参照 q[n] にアラインされたアクセスが含まれています。   [ F:\ct-rec\src\cbp_thread_int.c(232,43) ]
      リマーク #15388: ベクトル化のサポート: 参照 z[n+1] にアラインされたアクセスが含まれています。   [ F:\ct-rec\src\cbp_thread_int.c(232,26) ]
      リマーク #15305: ベクトル化のサポート: ベクトル長 4
      リマーク #15309: ベクトル化のサポート: 正規化されたベクトル化のオーバーヘッド 0.114
      リマーク #15417: ベクトル化のサポート: 浮動小数点数をアップコンバートします (単精度から倍精度 1)。   [ F:\ct-rec\src\cbp_thread_int.c(232,37) ]
      リマーク #15300: ループがベクトル化されました。
      リマーク #15442: すべてのループは剰余ループとして実行されます。
      リマーク #15448: マスクなしアライン・ユニット・ストライド・ロード: 1 
      リマーク #15449: マスクなしアライン・ユニット・ストライド・ストア: 1 
      リマーク #15475: --- ベクトルのコストサマリー開始 ---
      リマーク #15476: スカラーのコスト: 115 
      リマーク #15477: ベクトルのコスト: 41.500 
      リマーク #15478: スピードアップの期待値: 2.700 
      リマーク #15482: ベクトル化された算術ライブラリーの呼び出し: 1 
      リマーク #15487: 型変換: 2 
      リマーク #15488: --- ベクトルのコストサマリー終了 ---
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(232,6)
   <代替アライメントでベクトル化されたループ>
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(232,6)
   <ベクトル化の剰余ループ>
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(243,6)
      リマーク #25096:  ループ交換は完了しませんでした: ループの入れ子が完全ではありません (ソースのいずれかまたは他のコンパイラー変換による)
      リマーク #25451: アドバイス: ループ交換は (可能であれば) ループの入れ子に適用できます。推奨する順列 : ( 1 2 ) --> ( 2 1 ) 
      リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
      リマーク #17106: 並列依存関係: ANTI の依存関係が *fv (244:23) と *fh (248:3) の間に仮定されました。
      リマーク #17106: 並列依存関係: FLOW の依存関係が *fh (248:3) と *fv (244:23) の間に仮定されました。
      リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
      リマーク #15346: ベクトル依存関係: ANTI の依存関係が *fv (244:23) と *fh (248:3) の間に仮定されました。
      リマーク #15346: ベクトル依存関係: FLOW の依存関係が *fh (248:3) と *fv (244:23) の間に仮定されました。

      ループの開始 F:\ct-rec\src\cbp_thread_int.c(245,3)
         リマーク #17108: ループは並列化されませんでした: 計算量が不足しています。
         リマーク #15389: ベクトル化のサポート: 参照 *fh にアラインされていないアクセスが含まれています。   [ F:\ct-rec\src\cbp_thread_int.c(248,3) ]
         リマーク #15389: ベクトル化のサポート: 参照 *fh にアラインされていないアクセスが含まれています。   [ F:\ct-rec\src\cbp_thread_int.c(248,3) ]
         リマーク #15381: ベクトル化のサポート: ループ本体内でアラインされていないアクセスが使用されました。
         リマーク #15335: ループ はベクトル化されませんでした: ベクトル化は可能ですが非効率です。オーバーライドするには vector always ディレクティブまたは /Qvec-threshold0 を使用してください。
         リマーク #15328: ベクトル化のサポート: 不規則インデックス ロードがエミュレートされました (変数 <z[n1-1+1]>, インデックスの一部 非線形計算)   [ F:\ct-rec\src\cbp_thread_int.c(248,8) ]
         リマーク #15328: ベクトル化のサポート: 不規則インデックス ロードがエミュレートされました (変数 <z[n1+1]>, インデックスの一部 非線形計算)   [ F:\ct-rec\src\cbp_thread_int.c(248,27) ]
         リマーク #15328: ベクトル化のサポート: 不規則インデックス ロードがエミュレートされました (変数 <z[n1-1+1]>, インデックスの一部 非線形計算)   [ F:\ct-rec\src\cbp_thread_int.c(248,34) ]
         リマーク #15305: ベクトル化のサポート: ベクトル長 4
         リマーク #15309: ベクトル化のサポート: 正規化されたベクトル化のオーバーヘッド 0.036
         リマーク #15450: マスクなし非アライン・ユニット・ストライド・ロード: 1 
         リマーク #15451: マスクなし非アライン・ユニット・ストライド・ストア: 1 
         リマーク #15462: マスクなしインデックス (集約) ロード: 3 
         リマーク #15475: --- ベクトルのコストサマリー開始 ---
         リマーク #15476: スカラーのコスト: 22 
         リマーク #15477: ベクトルのコスト: 41.250 
         リマーク #15478: スピードアップの期待値: 0.530 
         リマーク #15488: --- ベクトルのコストサマリー終了 ---
         リマーク #25439: 剰余ありアンロール - 2  
      ループの終了

      ループの開始 F:\ct-rec\src\cbp_thread_int.c(245,3)
      <剰余>
      ループの終了
   ループの終了
ループの終了

ループの開始 F:\ct-rec\src\cbp_thread_int.c(257,2)
   リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
   リマーク #17106: 並列依存関係: ANTI の依存関係が f[v] (258:24) と f[v][h] (258:24) の間に仮定されました。
   リマーク #17106: 並列依存関係: FLOW の依存関係が f[v][h] (258:24) と f[v] (258:24) の間に仮定されました。
   リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
   リマーク #15346: ベクトル依存関係: ANTI の依存関係が f[v] (258:24) と f[v][h] (258:24) の間に仮定されました。
   リマーク #15346: ベクトル依存関係: FLOW の依存関係が f[v][h] (258:24) と f[v] (258:24) の間に仮定されました。

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(258,2)
      リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
      リマーク #17106: 並列依存関係: ANTI の依存関係が f[v] (258:24) と f[v][h] (258:24) の間に仮定されました。
      リマーク #17106: 並列依存関係: FLOW の依存関係が f[v][h] (258:24) と f[v] (258:24) の間に仮定されました。
      リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
      リマーク #15346: ベクトル依存関係: ANTI の依存関係が f[v] (258:24) と f[v][h] (258:24) の間に仮定されました。
      リマーク #15346: ベクトル依存関係: FLOW の依存関係が f[v][h] (258:24) と f[v] (258:24) の間に仮定されました。
      リマーク #25439: 剰余ありアンロール - 2  
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(258,2)
   <剰余>
   ループの終了
ループの終了

    レポート: コード生成の最適化 [cg]

F:\ct-rec\src\cbp_thread_int.c(205,2):リマーク #34014: memset の最適化アドバイス: デスティネーションのアライメントを 16 に増やし (__assume_aligned を使用して) ライブラリーの実装を高速化します。
F:\ct-rec\src\cbp_thread_int.c(205,2):リマーク #34026: memset の呼び出しは最適化されたライブラリー・バージョンの呼び出しとして実装されました。
F:\ct-rec\src\cbp_thread_int.c(188,1):リマーク #34051: レジスター割り当て: [CBP_thread] F:\ct-rec\src\cbp_thread_int.c:188

    ハードウェア・レジスター
        予約済み         :    2[ rsp rip]
        利用可能         :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        呼び出し先セーブ :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        割り当て済み     :   30[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm5 zmm7-zmm15]
        
    ルーチンの一時変数
        合計             :     627
            グローバル   :     239
            ローカル     :     388
        再生成           :      16
        退避             :      73
        
    ルーチンスタック
        変数             :       0 バイト*
            読み取り     :       0 [0.00e+000 ~ 0.0%]
            書き込み     :       0 [0.00e+000 ~ 0.0%]
        退避             :     584 バイト*
            読み取り     :     135 [5.86e+002 ~ 1.2%]
            書き込み     :      87 [1.91e+002 ~ 0.4%]
    
    注
    
        *オーバーラップしない変数と退避はスタック空間を共有できるため、
         合計スタックサイズはこれよりも小さくなる可能性があります。
    

===========================================================================

最適化レポート開始: CBP()

    レポート: プロシージャー間の最適化 [ipo]

インライン展開レポート: (CBP()) [18/8=225.0%] F:\ct-rec\src\cbp_thread_int.c(265,1)
  -> EXTERN: (271,8) ceil(double)
  -> EXTERN: (271,8) log(double)
  -> EXTERN: (284,50) ceil(double)
  -> EXTERN: (290,10) CreateThread(LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD)
  -> EXTERN: (291,3) Error()
  -> INLINE: (293,8) CBP_thread() (isz = 774) (sz = 781)
    -> EXTERN: (193,26) floor(double)
    -> EXTERN: (193,32) ldexp(double, int)
    -> INLINE: (212,6) FFT() (isz = 158) (sz = 169)
    -> INLINE: (217,6) FFT() (isz = 158) (sz = 169)
    -> EXTERN: (222,5) ldexp(double, int)
    -> EXTERN: (232,37) floor(double)
    -> EXTERN: (239,32) floor(double)
    -> EXTERN: (239,38) ldexp(double, int)
    -> EXTERN: (239,44) sin(double)
    -> EXTERN: (240,18) floor(double)
    -> EXTERN: (240,24) ldexp(double, int)
    -> EXTERN: (240,30) cos(double)
    -> EXTERN: (256,5) ldexp(double, int)
  -> EXTERN: (296,6) CloseHandle(HANDLE)
  -> EXTERN: (296,6) WaitForSingleObject(HANDLE, DWORD)


    レポート: ループの入れ子、ベクトル、自動並列化の最適化 [loop, vec, par]


ループの開始 F:\ct-rec\src\cbp_thread_int.c(282,2)
   リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
   リマーク #17106: 並列依存関係: OUTPUT の依存関係が v1 (286:3) と v1 (286:3) の間に仮定されました。
   リマーク #17106: 並列依存関係: OUTPUT の依存関係が v1 (286:3) と v1 (286:3) の間に仮定されました。
   リマーク #17106: 並列依存関係: OUTPUT の依存関係が v2 (286:19) と v2 (286:19) の間に仮定されました。
   リマーク #17106: 並列依存関係: OUTPUT の依存関係が v2 (286:19) と v2 (286:19) の間に仮定されました。
   リマーク #17106: 並列依存関係: ANTI の依存関係が y (283:6) と y (282:29) の間に仮定されました。
   リマーク #17106: 並列依存関係: FLOW の依存関係が y (282:29) と y (283:6) の間に仮定されました。
   リマーク #17106: 並列依存関係: FLOW の依存関係が y (282:29) と y (283:6) の間に仮定されました。
   リマーク #17106: 並列依存関係: ANTI の依存関係が y (283:6) と y (282:29) の間に仮定されました。
   リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
   リマーク #15346: ベクトル依存関係: ANTI の依存関係が v1 (286:3) と v1 (286:3) の間に仮定されました。
   リマーク #15346: ベクトル依存関係: FLOW の依存関係が v1 (286:3) と v1 (286:3) の間に仮定されました。
   リマーク #15346: ベクトル依存関係: FLOW の依存関係が v1 (286:3) と v1 (286:3) の間に仮定されました。
   リマーク #15346: ベクトル依存関係: ANTI の依存関係が v1 (286:3) と v1 (286:3) の間に仮定されました。
ループの終了

ループの開始 F:\ct-rec\src\cbp_thread_int.c(289,2)
   リマーク #17102: ループは並列化されませんでした: 並列化候補ではありません。
   リマーク #15523: ループ はベクトル化されませんでした: ループ制御変数 k は見つかりましたが、ループ  を実行する前にループの反復数を計算できません。
   リマーク #25456: ループで置換された配列参照スカラーの数: 1
ループの終了

ループの開始 F:\ct-rec\src\cbp_thread_int.c(204,2) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
   リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
   リマーク #17106: 並列依存関係: ANTI の依存関係が *F[v] (205:2) と *F[v][h] (205:22) の間に仮定されました。
   リマーク #17106: 並列依存関係: FLOW の依存関係が *F[v][h] (205:22) と *F[v] (205:2) の間に仮定されました。
   リマーク #15382: ベクトル化のサポート: 関数 ?1memset の呼び出しはベクトル化できません。   [ F:\ct-rec\src\cbp_thread_int.c(205,2) ]
   リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
   リマーク #15346: ベクトル依存関係: ANTI の依存関係が *F[v] (205:2) と *F[v][h] (205:22) の間に仮定されました。
   リマーク #15346: ベクトル依存関係: FLOW の依存関係が *F[v][h] (205:22) と *F[v] (205:2) の間に仮定されました。

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(205,2) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
      リマーク #25408: memset が生成されました。
      リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
      リマーク #17106: 並列依存関係: ANTI の依存関係が *F[v] (205:2) と *F[v][h] (205:22) の間に仮定されました。
      リマーク #17106: 並列依存関係: FLOW の依存関係が *F[v][h] (205:22) と *F[v] (205:2) の間に仮定されました。
      リマーク #15398: ループ はベクトル化されませんでした: ループは memset または memcpy に変換されました。

      ループの開始 F:\ct-rec\src\cbp_thread_int.c(205,2) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
         リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
         リマーク #17106: 並列依存関係: ANTI の依存関係が *F[v] (205:22) と *F[v][h] (205:22) の間に仮定されました。
         リマーク #17106: 並列依存関係: FLOW の依存関係が *F[v][h] (205:22) と *F[v] (205:22) の間に仮定されました。
         リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
         リマーク #15346: ベクトル依存関係: ANTI の依存関係が *F[v] (205:22) と *F[v][h] (205:22) の間に仮定されました。
         リマーク #15346: ベクトル依存関係: FLOW の依存関係が *F[v][h] (205:22) と *F[v] (205:22) の間に仮定されました。
         リマーク #25439: 剰余ありアンロール - 2  
         リマーク #25015: ループの最大トリップカウントの予測=24
      ループの終了

      ループの開始 F:\ct-rec\src\cbp_thread_int.c(205,2) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
      <剰余>
         リマーク #25015: ループの最大トリップカウントの予測=24
      ループの終了
   ループの終了
ループの終了

ループの開始 F:\ct-rec\src\cbp_thread_int.c(207,2) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
   リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
   リマーク #17106: 並列依存関係: OUTPUT の依存関係が z[l] (208:30) と q[n] (220:16) の間に仮定されました。
   リマーク #17106: 並列依存関係: OUTPUT の依存関係が q[n] (220:16) と z[l] (208:30) の間に仮定されました。
   リマーク #15542: ループ はベクトル化されませんでした: 内部ループがすでにベクトル化されています。

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(208,6) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
      リマーク #17108: ループは並列化されませんでした: 計算量が不足しています。
      リマーク #15516: ループ はベクトル化されませんでした: 効率化のためベクトル長 1 を選択しました。vectorlength 句を含むプラグマ/ディレクティブでオーバーライドされます。
      リマーク #15475: --- ベクトルのコストサマリー開始 ---
      リマーク #15476: スカラーのコスト: 14 
      リマーク #15477: ベクトルのコスト: 4.000 
      リマーク #15478: スピードアップの期待値: 3.460 
      リマーク #15488: --- ベクトルのコストサマリー終了 ---
      リマーク #25439: 剰余ありアンロール - 2  
      リマーク #25456: ループで置換された配列参照スカラーの数: 1
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(208,6) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
   <剰余>
      リマーク #25456: ループで置換された配列参照スカラーの数: 1
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(209,6) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
   <ベクトル化のピールループ, マルチバージョン v1>
      リマーク #25015: ループの最大トリップカウントの予測=3
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(209,6) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
   <マルチバージョン v1>
      リマーク #25228: データの依存関係のループをマルチバージョンにしました。
      リマーク #17108: ループは並列化されませんでした: 計算量が不足しています。
      リマーク #15388: ベクトル化のサポート: 参照 z[l] にアラインされたアクセスが含まれています。   [ F:\ct-rec\src\cbp_thread_int.c(209,54) ]
      リマーク #15388: ベクトル化のサポート: 参照 p[n] にアラインされたアクセスが含まれています。   [ F:\ct-rec\src\cbp_thread_int.c(209,48) ]
      リマーク #15305: ベクトル化のサポート: ベクトル長 4
      リマーク #15399: ベクトル化のサポート: アンロールファクターが 2 に設定されます。
      リマーク #15309: ベクトル化のサポート: 正規化されたベクトル化のオーバーヘッド 0.389
      リマーク #15417: ベクトル化のサポート: 浮動小数点数をアップコンバートします (単精度から倍精度 1)。   [ F:\ct-rec\src\cbp_thread_int.c(209,54) ]
      リマーク #15300: ループがベクトル化されました。
      リマーク #15442: すべてのループは剰余ループとして実行されます。
      リマーク #15448: マスクなしアライン・ユニット・ストライド・ロード: 1 
      リマーク #15449: マスクなしアライン・ユニット・ストライド・ストア: 1 
      リマーク #15475: --- ベクトルのコストサマリー開始 ---
      リマーク #15476: スカラーのコスト: 16 
      リマーク #15477: ベクトルのコスト: 4.500 
      リマーク #15478: スピードアップの期待値: 3.400 
      リマーク #15487: 型変換: 1 
      リマーク #15488: --- ベクトルのコストサマリー終了 ---
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(209,6) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
   <代替アライメントでベクトル化されたループ, マルチバージョン v1>
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(209,6) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
   <ベクトル化の剰余ループ, マルチバージョン v1>
      リマーク #15388: ベクトル化のサポート: 参照 z[l] にアラインされたアクセスが含まれています。   [ F:\ct-rec\src\cbp_thread_int.c(209,54) ]
      リマーク #15389: ベクトル化のサポート: 参照 p[n] にアラインされていないアクセスが含まれています。   [ F:\ct-rec\src\cbp_thread_int.c(209,48) ]
      リマーク #15381: ベクトル化のサポート: ループ本体内でアラインされていないアクセスが使用されました。
      リマーク #15305: ベクトル化のサポート: ベクトル長 2
      リマーク #15309: ベクトル化のサポート: 正規化されたベクトル化のオーバーヘッド 0.813
      リマーク #15417: ベクトル化のサポート: 浮動小数点数をアップコンバートします (単精度から倍精度 1)。   [ F:\ct-rec\src\cbp_thread_int.c(209,54) ]
      リマーク #15301: 剰余ループ がベクトル化されました。
      リマーク #15442: すべてのループは剰余ループとして実行されます。
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(209,6) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
   <ベクトル化の剰余ループ, マルチバージョン v1>
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(209,6) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
   <マルチバージョン v2>
      リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
      リマーク #17106: 並列依存関係: FLOW の依存関係が z[l] (209:54) と p[n] (209:54) の間に仮定されました。
      リマーク #17106: 並列依存関係: ANTI の依存関係が p[n] (209:54) と z[l] (209:54) の間に仮定されました。
      リマーク #25427: ループ文の順序変更
      リマーク #15304: ループ はベクトル化されませんでした: マルチバージョンのベクトル化できないループ・インスタンスです。
      リマーク #25439: 剰余ありアンロール - 2  
      リマーク #25456: ループで置換された配列参照スカラーの数: 2
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(209,6) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
   <剰余, マルチバージョン v2>
      リマーク #25456: ループで置換された配列参照スカラーの数: 2
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(210,6) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
      リマーク #17108: ループは並列化されませんでした: 計算量が不足しています。
      リマーク #15516: ループ はベクトル化されませんでした: 効率化のためベクトル長 1 を選択しました。vectorlength 句を含むプラグマ/ディレクティブでオーバーライドされます。
      リマーク #15475: --- ベクトルのコストサマリー開始 ---
      リマーク #15476: スカラーのコスト: 13 
      リマーク #15477: ベクトルのコスト: 3.000 
      リマーク #15478: スピードアップの期待値: 4.280 
      リマーク #15488: --- ベクトルのコストサマリー終了 ---
      リマーク #25439: 剰余ありアンロール - 2  
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(210,6) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
   <剰余>
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(104,2) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
      リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
      リマーク #17106: 並列依存関係: ANTI の依存関係が z[j] (108:5) と z[k] (108:27) の間に仮定されました。
      リマーク #17106: 並列依存関係: FLOW の依存関係が z[k] (108:27) と z[j] (108:5) の間に仮定されました。
      リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
      リマーク #15346: ベクトル依存関係: ANTI の依存関係が z[j] (108:5) と z[k] (108:27) の間に仮定されました。
      リマーク #15346: ベクトル依存関係: FLOW の依存関係が z[k] (108:27) と z[j] (108:5) の間に仮定されました。

      ループの開始 F:\ct-rec\src\cbp_thread_int.c(105,24) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
         リマーク #17102: ループは並列化されませんでした: 並列化候補ではありません。
         リマーク #15521: ループ はベクトル化されませんでした: ループ制御変数が識別されませんでした。ループを実行する前に反復数を計算できる式に置き換えるか、または OpenMP* 仕様  の標準ループ形式を使用してください。
      ループの終了
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(111,2) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
      リマーク #17102: ループは並列化されませんでした: 並列化候補ではありません。
      リマーク #15521: ループ はベクトル化されませんでした: ループ制御変数が識別されませんでした。ループを実行する前に反復数を計算できる式に置き換えるか、または OpenMP* 仕様  の標準ループ形式を使用してください。

      ループの開始 F:\ct-rec\src\cbp_thread_int.c(112,6) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
         リマーク #25096:  ループ交換は完了しませんでした: ループの入れ子が完全ではありません (ソースのいずれかまたは他のコンパイラー変換による)
         リマーク #25452: 元の順序はマージンが近いことを除けば適切です。
         リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
         リマーク #17106: 並列依存関係: ANTI の依存関係が e->x (113:3) と b->x (115:21) の間に仮定されました。
         リマーク #17106: 並列依存関係: FLOW の依存関係が b->x (115:21) と e->x (113:3) の間に仮定されました。
         リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
         リマーク #15346: ベクトル依存関係: ANTI の依存関係が e->x (113:3) と b->x (115:21) の間に仮定されました。
         リマーク #15346: ベクトル依存関係: FLOW の依存関係が b->x (115:21) と e->x (113:3) の間に仮定されました。

         ループの開始 F:\ct-rec\src\cbp_thread_int.c(114,3) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
            リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
            リマーク #17106: 並列依存関係: ANTI の依存関係が *b (115:12) と a->y (116:34) の間に仮定されました。
            リマーク #17106: 並列依存関係: FLOW の依存関係が a->y (116:34) と *b (115:12) の間に仮定されました。
            リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
            リマーク #15346: ベクトル依存関係: ANTI の依存関係が *b (115:12) と a->y (116:34) の間に仮定されました。
            リマーク #15346: ベクトル依存関係: FLOW の依存関係が a->y (116:34) と *b (115:12) の間に仮定されました。
         ループの終了
      ループの終了
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(214,6) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
      リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
      リマーク #17106: 並列依存関係: OUTPUT の依存関係が (z+n*16)[_2] (215:3) と (z+n*16)[_2] (215:3) の間に仮定されました。
      リマーク #17106: 並列依存関係: OUTPUT の依存関係が (z+n*16)[_2] (215:3) と (z+n*16)[_2] (215:3) の間に仮定されました。
      リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
      リマーク #15346: ベクトル依存関係: OUTPUT の依存関係が (z+n*16)[_2] (215:3) と (z+n*16)[_2] (215:3) の間に仮定されました。
      リマーク #15346: ベクトル依存関係: OUTPUT の依存関係が (z+n*16)[_2] (215:3) と (z+n*16)[_2] (215:3) の間に仮定されました。

      ループの開始 F:\ct-rec\src\cbp_thread_int.c(215,3) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
         リマーク #17108: ループは並列化されませんでした: 計算量が不足しています。
         リマーク #15389: ベクトル化のサポート: 参照 (z+n*16)[_2] にアラインされていないアクセスが含まれています。
         リマーク #15389: ベクトル化のサポート: 参照 (z+n*16)[_2] にアラインされていないアクセスが含まれています。
         リマーク #15381: ベクトル化のサポート: ループ本体内でアラインされていないアクセスが使用されました。
         リマーク #15335: ループ はベクトル化されませんでした: ベクトル化は可能ですが非効率です。オーバーライドするには vector always ディレクティブまたは /Qvec-threshold0 を使用してください。
         リマーク #15305: ベクトル化のサポート: ベクトル長 2
         リマーク #15427: ループが完全にアンロールされました。
         リマーク #15309: ベクトル化のサポート: 正規化されたベクトル化のオーバーヘッド 0.889
         リマーク #15450: マスクなし非アライン・ユニット・ストライド・ロード: 1 
         リマーク #15451: マスクなし非アライン・ユニット・ストライド・ストア: 1 
         リマーク #15475: --- ベクトルのコストサマリー開始 ---
         リマーク #15476: スカラーのコスト: 7 
         リマーク #15477: ベクトルのコスト: 4.500 
         リマーク #15478: スピードアップの期待値: 0.820 
         リマーク #15488: --- ベクトルのコストサマリー終了 ---
         リマーク #25436: 完全なアンロール - 2  
      ループの終了
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(104,2) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
      リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
      リマーク #17106: 並列依存関係: ANTI の依存関係が z[j] (108:5) と z[k] (108:27) の間に仮定されました。
      リマーク #17106: 並列依存関係: FLOW の依存関係が z[k] (108:27) と z[j] (108:5) の間に仮定されました。
      リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
      リマーク #15346: ベクトル依存関係: ANTI の依存関係が z[j] (108:5) と z[k] (108:27) の間に仮定されました。
      リマーク #15346: ベクトル依存関係: FLOW の依存関係が z[k] (108:27) と z[j] (108:5) の間に仮定されました。

      ループの開始 F:\ct-rec\src\cbp_thread_int.c(105,24) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
         リマーク #17102: ループは並列化されませんでした: 並列化候補ではありません。
         リマーク #15521: ループ はベクトル化されませんでした: ループ制御変数が識別されませんでした。ループを実行する前に反復数を計算できる式に置き換えるか、または OpenMP* 仕様  の標準ループ形式を使用してください。
      ループの終了
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(111,2) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
      リマーク #17102: ループは並列化されませんでした: 並列化候補ではありません。
      リマーク #15521: ループ はベクトル化されませんでした: ループ制御変数が識別されませんでした。ループを実行する前に反復数を計算できる式に置き換えるか、または OpenMP* 仕様  の標準ループ形式を使用してください。

      ループの開始 F:\ct-rec\src\cbp_thread_int.c(112,6) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
         リマーク #25096:  ループ交換は完了しませんでした: ループの入れ子が完全ではありません (ソースのいずれかまたは他のコンパイラー変換による)
         リマーク #25452: 元の順序はマージンが近いことを除けば適切です。
         リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
         リマーク #17106: 並列依存関係: ANTI の依存関係が *e (113:11) と a->y (116:34) の間に仮定されました。
         リマーク #17106: 並列依存関係: FLOW の依存関係が a->y (116:34) と *e (113:11) の間に仮定されました。
         リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
         リマーク #15346: ベクトル依存関係: ANTI の依存関係が *e (113:11) と a->y (116:34) の間に仮定されました。
         リマーク #15346: ベクトル依存関係: FLOW の依存関係が a->y (116:34) と *e (113:11) の間に仮定されました。

         ループの開始 F:\ct-rec\src\cbp_thread_int.c(114,3) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
            リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
            リマーク #17106: 並列依存関係: ANTI の依存関係が *b (115:12) と a->y (116:34) の間に仮定されました。
            リマーク #17106: 並列依存関係: FLOW の依存関係が a->y (116:34) と *b (115:12) の間に仮定されました。
            リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
            リマーク #15346: ベクトル依存関係: ANTI の依存関係が *b (115:12) と a->y (116:34) の間に仮定されました。
            リマーク #15346: ベクトル依存関係: FLOW の依存関係が a->y (116:34) と *b (115:12) の間に仮定されました。
         ループの終了
      ループの終了
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(219,6) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
      リマーク #17108: ループは並列化されませんでした: 計算量が不足しています。
      リマーク #15389: ベクトル化のサポート: 参照 q[n] にアラインされていないアクセスが含まれています。   [ F:\ct-rec\src\cbp_thread_int.c(220,16) ]
      リマーク #15381: ベクトル化のサポート: ループ本体内でアラインされていないアクセスが使用されました。
      リマーク #15328: ベクトル化のサポート: 非ユニットストライド ロードがエミュレートされました (変数 <z->x[n]>、ストライドは 2)   [ F:\ct-rec\src\cbp_thread_int.c(220,21) ]
      リマーク #15305: ベクトル化のサポート: ベクトル長 2
      リマーク #15399: ベクトル化のサポート: アンロールファクターが 4 に設定されます。
      リマーク #15309: ベクトル化のサポート: 正規化されたベクトル化のオーバーヘッド 0.146
      リマーク #15418: ベクトル化のサポート: 浮動小数点数をダウンコンバートします (倍精度から単精度 1)。   [ F:\ct-rec\src\cbp_thread_int.c(220,16) ]
      リマーク #15417: ベクトル化のサポート: 浮動小数点数をアップコンバートします (単精度から倍精度 1)。   [ F:\ct-rec\src\cbp_thread_int.c(195,16) ]
      リマーク #15300: ループがベクトル化されました。
      リマーク #15451: マスクなし非アライン・ユニット・ストライド・ストア: 1 
      リマーク #15452: マスクなしストライドロード: 1 
      リマーク #15475: --- ベクトルのコストサマリー開始 ---
      リマーク #15476: スカラーのコスト: 21 
      リマーク #15477: ベクトルのコスト: 20.500 
      リマーク #15478: スピードアップの期待値: 1.020 
      リマーク #15487: 型変換: 2 
      リマーク #15488: --- ベクトルのコストサマリー終了 ---
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(219,6) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
   <ベクトル化の剰余ループ>
   ループの終了
ループの終了

ループの開始 F:\ct-rec\src\cbp_thread_int.c(229,2) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
   リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
   リマーク #17106: 並列依存関係: FLOW の依存関係が z[n+1] (232:26) と z[n1-1+1] (248:3) の間に仮定されました。
   リマーク #17106: 並列依存関係: ANTI の依存関係が z[n1-1+1] (248:3) と z[n+1] (232:26) の間に仮定されました。
   リマーク #15542: ループ はベクトル化されませんでした: 内部ループがすでにベクトル化されています。

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(232,6) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
   <ベクトル化のピールループ>
      リマーク #25015: ループの最大トリップカウントの予測=3
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(232,6) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
      リマーク #17108: ループは並列化されませんでした: 計算量が不足しています。
      リマーク #15388: ベクトル化のサポート: 参照 q[n] にアラインされたアクセスが含まれています。   [ F:\ct-rec\src\cbp_thread_int.c(232,43) ]
      リマーク #15388: ベクトル化のサポート: 参照 z[n+1] にアラインされたアクセスが含まれています。   [ F:\ct-rec\src\cbp_thread_int.c(232,26) ]
      リマーク #15305: ベクトル化のサポート: ベクトル長 4
      リマーク #15309: ベクトル化のサポート: 正規化されたベクトル化のオーバーヘッド 0.114
      リマーク #15417: ベクトル化のサポート: 浮動小数点数をアップコンバートします (単精度から倍精度 1)。   [ F:\ct-rec\src\cbp_thread_int.c(232,37) ]
      リマーク #15300: ループがベクトル化されました。
      リマーク #15442: すべてのループは剰余ループとして実行されます。
      リマーク #15448: マスクなしアライン・ユニット・ストライド・ロード: 1 
      リマーク #15449: マスクなしアライン・ユニット・ストライド・ストア: 1 
      リマーク #15475: --- ベクトルのコストサマリー開始 ---
      リマーク #15476: スカラーのコスト: 115 
      リマーク #15477: ベクトルのコスト: 41.500 
      リマーク #15478: スピードアップの期待値: 2.700 
      リマーク #15482: ベクトル化された算術ライブラリーの呼び出し: 1 
      リマーク #15487: 型変換: 2 
      リマーク #15488: --- ベクトルのコストサマリー終了 ---
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(232,6) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
   <代替アライメントでベクトル化されたループ>
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(232,6) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
   <ベクトル化の剰余ループ>
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(243,6) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
      リマーク #25096:  ループ交換は完了しませんでした: ループの入れ子が完全ではありません (ソースのいずれかまたは他のコンパイラー変換による)
      リマーク #25451: アドバイス: ループ交換は (可能であれば) ループの入れ子に適用できます。推奨する順列 : ( 1 2 ) --> ( 2 1 ) 
      リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
      リマーク #17106: 並列依存関係: ANTI の依存関係が *fv (244:23) と *fh (248:3) の間に仮定されました。
      リマーク #17106: 並列依存関係: FLOW の依存関係が *fh (248:3) と *fv (244:23) の間に仮定されました。
      リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
      リマーク #15346: ベクトル依存関係: ANTI の依存関係が *fv (244:23) と *fh (248:3) の間に仮定されました。
      リマーク #15346: ベクトル依存関係: FLOW の依存関係が *fh (248:3) と *fv (244:23) の間に仮定されました。

      ループの開始 F:\ct-rec\src\cbp_thread_int.c(245,3) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
         リマーク #17108: ループは並列化されませんでした: 計算量が不足しています。
         リマーク #15389: ベクトル化のサポート: 参照 *fh にアラインされていないアクセスが含まれています。   [ F:\ct-rec\src\cbp_thread_int.c(248,3) ]
         リマーク #15389: ベクトル化のサポート: 参照 *fh にアラインされていないアクセスが含まれています。   [ F:\ct-rec\src\cbp_thread_int.c(248,3) ]
         リマーク #15381: ベクトル化のサポート: ループ本体内でアラインされていないアクセスが使用されました。
         リマーク #15335: ループ はベクトル化されませんでした: ベクトル化は可能ですが非効率です。オーバーライドするには vector always ディレクティブまたは /Qvec-threshold0 を使用してください。
         リマーク #15328: ベクトル化のサポート: 不規則インデックス ロードがエミュレートされました (変数 <z[n1-1+1]>, インデックスの一部 非線形計算)   [ F:\ct-rec\src\cbp_thread_int.c(248,8) ]
         リマーク #15328: ベクトル化のサポート: 不規則インデックス ロードがエミュレートされました (変数 <z[n1+1]>, インデックスの一部 非線形計算)   [ F:\ct-rec\src\cbp_thread_int.c(248,27) ]
         リマーク #15328: ベクトル化のサポート: 不規則インデックス ロードがエミュレートされました (変数 <z[n1-1+1]>, インデックスの一部 非線形計算)   [ F:\ct-rec\src\cbp_thread_int.c(248,34) ]
         リマーク #15305: ベクトル化のサポート: ベクトル長 4
         リマーク #15309: ベクトル化のサポート: 正規化されたベクトル化のオーバーヘッド 0.036
         リマーク #15450: マスクなし非アライン・ユニット・ストライド・ロード: 1 
         リマーク #15451: マスクなし非アライン・ユニット・ストライド・ストア: 1 
         リマーク #15462: マスクなしインデックス (集約) ロード: 3 
         リマーク #15475: --- ベクトルのコストサマリー開始 ---
         リマーク #15476: スカラーのコスト: 22 
         リマーク #15477: ベクトルのコスト: 41.250 
         リマーク #15478: スピードアップの期待値: 0.530 
         リマーク #15488: --- ベクトルのコストサマリー終了 ---
         リマーク #25439: 剰余ありアンロール - 2  
      ループの終了

      ループの開始 F:\ct-rec\src\cbp_thread_int.c(245,3) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
      <剰余>
      ループの終了
   ループの終了
ループの終了

ループの開始 F:\ct-rec\src\cbp_thread_int.c(257,2) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
   リマーク #25082: 前処理ループの入れ子: 単純文をループから外に移動しています。
   リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
   リマーク #17106: 並列依存関係: ANTI の依存関係が *F[v] (258:24) と *F[v][h] (258:24) の間に仮定されました。
   リマーク #17106: 並列依存関係: FLOW の依存関係が *F[v][h] (258:24) と *F[v] (258:24) の間に仮定されました。
   リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
   リマーク #15346: ベクトル依存関係: ANTI の依存関係が *F[v] (258:24) と *F[v][h] (258:24) の間に仮定されました。
   リマーク #15346: ベクトル依存関係: FLOW の依存関係が *F[v][h] (258:24) と *F[v] (258:24) の間に仮定されました。

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(258,2) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
      リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
      リマーク #17106: 並列依存関係: ANTI の依存関係が *F[v] (258:24) と *F[v][h] (258:24) の間に仮定されました。
      リマーク #17106: 並列依存関係: FLOW の依存関係が *F[v][h] (258:24) と *F[v] (258:24) の間に仮定されました。
      リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
      リマーク #15346: ベクトル依存関係: ANTI の依存関係が *F[v] (258:24) と *F[v][h] (258:24) の間に仮定されました。
      リマーク #15346: ベクトル依存関係: FLOW の依存関係が *F[v][h] (258:24) と *F[v] (258:24) の間に仮定されました。
      リマーク #25439: 剰余ありアンロール - 2  
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(258,2) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(293,8)
   <剰余>
   ループの終了
ループの終了

ループの開始 F:\ct-rec\src\cbp_thread_int.c(295,2)
   リマーク #17102: ループは並列化されませんでした: 並列化候補ではありません。
   リマーク #15523: ループ はベクトル化されませんでした: ループ制御変数 k は見つかりましたが、ループ  を実行する前にループの反復数を計算できません。

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(298,15)
      リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
      リマーク #17106: 並列依存関係: ANTI の依存関係が F0[v] (299:28) と F0[v][h] (299:28) の間に仮定されました。
      リマーク #17106: 並列依存関係: FLOW の依存関係が F0[v][h] (299:28) と F0[v] (299:28) の間に仮定されました。
      リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
      リマーク #15346: ベクトル依存関係: ANTI の依存関係が F0[v] (299:28) と F0[v][h] (299:28) の間に仮定されました。
      リマーク #15346: ベクトル依存関係: FLOW の依存関係が F0[v][h] (299:28) と F0[v] (299:28) の間に仮定されました。

      ループの開始 F:\ct-rec\src\cbp_thread_int.c(299,8)
         リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
         リマーク #17106: 並列依存関係: ANTI の依存関係が F0[v] (299:28) と F0[v][h] (299:28) の間に仮定されました。
         リマーク #17106: 並列依存関係: FLOW の依存関係が F0[v][h] (299:28) と F0[v] (299:28) の間に仮定されました。
         リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
         リマーク #15346: ベクトル依存関係: ANTI の依存関係が F0[v] (299:28) と F0[v][h] (299:28) の間に仮定されました。
         リマーク #15346: ベクトル依存関係: FLOW の依存関係が F0[v][h] (299:28) と F0[v] (299:28) の間に仮定されました。
         リマーク #25439: 剰余ありアンロール - 2  
      ループの終了

      ループの開始 F:\ct-rec\src\cbp_thread_int.c(299,8)
      <剰余>
      ループの終了
   ループの終了
ループの終了

    レポート: コード生成の最適化 [cg]

F:\ct-rec\src\cbp_thread_int.c(205,2):リマーク #34014: memset の最適化アドバイス: デスティネーションのアライメントを 16 に増やし (__assume_aligned を使用して) ライブラリーの実装を高速化します。
F:\ct-rec\src\cbp_thread_int.c(205,2):リマーク #34026: memset の呼び出しは最適化されたライブラリー・バージョンの呼び出しとして実装されました。
F:\ct-rec\src\cbp_thread_int.c(265,1):リマーク #34051: レジスター割り当て: [CBP] F:\ct-rec\src\cbp_thread_int.c:265

    ハードウェア・レジスター
        予約済み         :    2[ rsp rip]
        利用可能         :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        呼び出し先セーブ :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        割り当て済み     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    ルーチンの一時変数
        合計             :     691
            グローバル   :     258
            ローカル     :     433
        再生成           :      23
        退避             :      72
        
    ルーチンスタック
        変数             :       0 バイト*
            読み取り     :       0 [0.00e+000 ~ 0.0%]
            書き込み     :       0 [0.00e+000 ~ 0.0%]
        退避             :     576 バイト*
            読み取り     :     130 [5.58e+002 ~ 1.1%]
            書き込み     :     114 [2.54e+002 ~ 0.5%]
    
    注
    
        *オーバーラップしない変数と退避はスタック空間を共有できるため、
         合計スタックサイズはこれよりも小さくなる可能性があります。
    

===========================================================================

最適化レポート開始: TermCBP()

    レポート: プロシージャー間の最適化 [ipo]

インライン展開レポート: (TermCBP()) [19/8=237.5%] F:\ct-rec\src\cbp_thread_int.c(305,1)
  -> EXTERN: (306,2) free(void *)
  -> EXTERN: (306,17) free(void *)
  -> EXTERN: (306,29) free(void *)
  -> EXTERN: (306,38) free(void *)
  -> EXTERN: (306,48) free(void *)
  -> EXTERN: (307,2) free(void *)
  -> EXTERN: (307,14) free(void *)
  -> EXTERN: (307,23) free(void *)
  -> EXTERN: (307,32) free(void *)
  -> EXTERN: (307,44) free(void *)
  -> EXTERN: (307,53) free(void *)
  -> EXTERN: (308,2) free(void *)
  -> EXTERN: (308,14) free(void *)
  -> EXTERN: (309,2) free(void *)


    レポート: コード生成の最適化 [cg]

F:\ct-rec\src\cbp_thread_int.c(305,1):リマーク #34051: レジスター割り当て: [TermCBP] F:\ct-rec\src\cbp_thread_int.c:305

    ハードウェア・レジスター
        予約済み         :    2[ rsp rip]
        利用可能         :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        呼び出し先セーブ :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        割り当て済み     :    3[ rcx rbx rdi]
        
    ルーチンの一時変数
        合計             :      46
            グローバル   :      23
            ローカル     :      23
        再生成           :       0
        退避             :       2
        
    ルーチンスタック
        変数             :       0 バイト*
            読み取り     :       0 [0.00e+000 ~ 0.0%]
            書き込み     :       0 [0.00e+000 ~ 0.0%]
        退避             :       0 バイト*
            読み取り     :       0 [0.00e+000 ~ 0.0%]
            書き込み     :       0 [0.00e+000 ~ 0.0%]
    
    注
    
        *オーバーラップしない変数と退避はスタック空間を共有できるため、
         合計スタックサイズはこれよりも小さくなる可能性があります。
    

===========================================================================

最適化レポート開始: InitCBP()

    レポート: プロシージャー間の最適化 [ipo]

インライン展開レポート: (InitCBP()) [20/8=250.0%] F:\ct-rec\src\cbp_thread_int.c(132,1)
  -> EXTERN: (135,16) ceil(double)
  -> EXTERN: (135,16) log(double)
  -> EXTERN: (142,10) getenv(const char *)
  -> EXTERN: (142,52) atoi(const char *)
  -> EXTERN: (144,20) Error()
  -> EXTERN: (146,14) malloc(size_t)
  -> EXTERN: (147,14) malloc(size_t)
  -> EXTERN: (148,15) malloc(size_t)
  -> EXTERN: (149,14) malloc(size_t)
  -> EXTERN: (150,14) malloc(size_t)
  -> EXTERN: (151,15) malloc(size_t)
  -> EXTERN: (152,14) malloc(size_t)
  -> EXTERN: (153,14) malloc(size_t)
  -> EXTERN: (154,15) malloc(size_t)
  -> EXTERN: (155,15) malloc(size_t)
  -> EXTERN: (156,15) malloc(size_t)
  -> EXTERN: (157,14) malloc(size_t)
  -> EXTERN: (158,15) malloc(size_t)
  -> EXTERN: (159,15) malloc(size_t)
  -> INLINE: (169,28) Ramachandran() (isz = 11) (sz = 18)
  -> INLINE: (169,46) Ramachandran() (isz = 11) (sz = 18)
  -> EXTERN: (173,23) cos(double)
  -> INLINE: (173,47) Ramachandran() (isz = 11) (sz = 18)
  -> EXTERN: (174,23) sin(double)
  -> INLINE: (176,2) FFT() (isz = 158) (sz = 169)


    レポート: ループの入れ子、ベクトル、自動並列化の最適化 [loop, vec, par]


ループの開始 F:\ct-rec\src\cbp_thread_int.c(161,2)
   リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
   リマーク #17106: 並列依存関係: FLOW の依存関係が P[m] (162:6) と P[m-1] (162:6) の間に仮定されました。
   リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
   リマーク #15346: ベクトル依存関係: FLOW の依存関係が P[m] (162:6) と P[m-1] (162:6) の間に仮定されました。
   リマーク #25439: 剰余ありアンロール - 2  
ループの終了

ループの開始 F:\ct-rec\src\cbp_thread_int.c(161,2)
<剰余>
ループの終了

ループの開始 F:\ct-rec\src\cbp_thread_int.c(164,2)
   リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
   リマーク #17106: 並列依存関係: FLOW の依存関係が *F[n] (164:23) と *F[n-1] (164:23) の間に仮定されました。
   リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
   リマーク #15346: ベクトル依存関係: FLOW の依存関係が *F[n] (164:23) と *F[n-1] (164:23) の間に仮定されました。
   リマーク #25439: 剰余ありアンロール - 2  
ループの終了

ループの開始 F:\ct-rec\src\cbp_thread_int.c(164,2)
<剰余>
ループの終了

ループの開始 F:\ct-rec\src\cbp_thread_int.c(165,2)
   リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
   リマーク #17106: 並列依存関係: FLOW の依存関係が Z[k] (166:6) と Z[k-1] (166:6) の間に仮定されました。
   リマーク #15542: ループ はベクトル化されませんでした: 内部ループがすでにベクトル化されています。

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(167,22)
   <ベクトル化のピールループ>
      リマーク #25015: ループの最大トリップカウントの予測=1
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(167,22)
      リマーク #17108: ループは並列化されませんでした: 計算量が不足しています。
      リマーク #15388: ベクトル化のサポート: 参照 F[k][n] にアラインされたアクセスが含まれています。   [ F:\ct-rec\src\cbp_thread_int.c(167,43) ]
      リマーク #15388: ベクトル化のサポート: 参照 F[k-1][n] にアラインされたアクセスが含まれています。   [ F:\ct-rec\src\cbp_thread_int.c(167,51) ]
      リマーク #15305: ベクトル化のサポート: ベクトル長 2
      リマーク #15399: ベクトル化のサポート: アンロールファクターが 4 に設定されます。
      リマーク #15309: ベクトル化のサポート: 正規化されたベクトル化のオーバーヘッド 0.850
      リマーク #15300: ループがベクトル化されました。
      リマーク #15442: すべてのループは剰余ループとして実行されます。
      リマーク #15448: マスクなしアライン・ユニット・ストライド・ロード: 1 
      リマーク #15449: マスクなしアライン・ユニット・ストライド・ストア: 1 
      リマーク #15475: --- ベクトルのコストサマリー開始 ---
      リマーク #15476: スカラーのコスト: 7 
      リマーク #15477: ベクトルのコスト: 2.500 
      リマーク #15478: スピードアップの期待値: 2.670 
      リマーク #15488: --- ベクトルのコストサマリー終了 ---
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(167,22)
   <代替アライメントでベクトル化されたループ>
   ループの終了

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(167,22)
   <ベクトル化の剰余ループ>
   ループの終了
ループの終了

ループの開始 F:\ct-rec\src\cbp_thread_int.c(171,2)
   リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
   リマーク #17106: 並列依存関係: OUTPUT の依存関係が E->x[n] (173:16) と E->x[l] (173:6) の間に仮定されました。
   リマーク #17106: 並列依存関係: OUTPUT の依存関係が E->x[l] (173:6) と E->x[n] (173:16) の間に仮定されました。
   リマーク #25427: ループ文の順序変更
   リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
   リマーク #15346: ベクトル依存関係: OUTPUT の依存関係が z->y[n] (174:40) と z->y[l] (174:33) の間に仮定されました。
   リマーク #15346: ベクトル依存関係: OUTPUT の依存関係が z->y[l] (174:33) と z->y[n] (174:40) の間に仮定されました。
ループの終了

ループの開始 F:\ct-rec\src\cbp_thread_int.c(104,2) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(176,2)
   リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
   リマーク #17106: 並列依存関係: ANTI の依存関係が z[j] (108:5) と z[k] (108:27) の間に仮定されました。
   リマーク #17106: 並列依存関係: FLOW の依存関係が z[k] (108:27) と z[j] (108:5) の間に仮定されました。
   リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
   リマーク #15346: ベクトル依存関係: ANTI の依存関係が z[j] (108:5) と z[k] (108:27) の間に仮定されました。
   リマーク #15346: ベクトル依存関係: FLOW の依存関係が z[k] (108:27) と z[j] (108:5) の間に仮定されました。

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(105,24) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(176,2)
      リマーク #17102: ループは並列化されませんでした: 並列化候補ではありません。
      リマーク #15521: ループ はベクトル化されませんでした: ループ制御変数が識別されませんでした。ループを実行する前に反復数を計算できる式に置き換えるか、または OpenMP* 仕様  の標準ループ形式を使用してください。
   ループの終了
ループの終了

ループの開始 F:\ct-rec\src\cbp_thread_int.c(111,2) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(176,2)
   リマーク #17102: ループは並列化されませんでした: 並列化候補ではありません。
   リマーク #15521: ループ はベクトル化されませんでした: ループ制御変数が識別されませんでした。ループを実行する前に反復数を計算できる式に置き換えるか、または OpenMP* 仕様  の標準ループ形式を使用してください。

   ループの開始 F:\ct-rec\src\cbp_thread_int.c(112,6) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(176,2)
      リマーク #25096:  ループ交換は完了しませんでした: ループの入れ子が完全ではありません (ソースのいずれかまたは他のコンパイラー変換による)
      リマーク #25452: 元の順序はマージンが近いことを除けば適切です。
      リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
      リマーク #17106: 並列依存関係: ANTI の依存関係が *b (115:12) と a->y (116:34) の間に仮定されました。
      リマーク #17106: 並列依存関係: FLOW の依存関係が a->y (116:34) と *b (115:12) の間に仮定されました。
      リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
      リマーク #15346: ベクトル依存関係: ANTI の依存関係が *b (115:12) と a->y (116:34) の間に仮定されました。
      リマーク #15346: ベクトル依存関係: FLOW の依存関係が a->y (116:34) と *b (115:12) の間に仮定されました。

      ループの開始 F:\ct-rec\src\cbp_thread_int.c(114,3) インライン展開後 F:\ct-rec\src\cbp_thread_int.c(176,2)
         リマーク #17104: ループは並列化されませんでした: 並列依存関係が存在しています。
         リマーク #17106: 並列依存関係: ANTI の依存関係が *b (115:12) と a->y (116:34) の間に仮定されました。
         リマーク #17106: 並列依存関係: FLOW の依存関係が a->y (116:34) と *b (115:12) の間に仮定されました。
         リマーク #15344: ループ はベクトル化されませんでした: ベクトル依存関係がベクトル化を妨げています。
         リマーク #15346: ベクトル依存関係: ANTI の依存関係が *b (115:12) と a->y (116:34) の間に仮定されました。
         リマーク #15346: ベクトル依存関係: FLOW の依存関係が a->y (116:34) と *b (115:12) の間に仮定されました。
         リマーク #25456: ループで置換された配列参照スカラーの数: 1
      ループの終了
   ループの終了
ループの終了

ループの開始 F:\ct-rec\src\cbp_thread_int.c(178,2)
<ベクトル化のピールループ>
   リマーク #25015: ループの最大トリップカウントの予測=1
ループの終了

ループの開始 F:\ct-rec\src\cbp_thread_int.c(178,2)
   リマーク #17108: ループは並列化されませんでした: 計算量が不足しています。
   リマーク #15388: ベクトル化のサポート: 参照 G[n] にアラインされたアクセスが含まれています。   [ F:\ct-rec\src\cbp_thread_int.c(178,23) ]
   リマーク #15328: ベクトル化のサポート: 非ユニットストライド ロードがエミュレートされました (変数 <z->x[n]>、ストライドは 2)   [ F:\ct-rec\src\cbp_thread_int.c(178,28) ]
   リマーク #15305: ベクトル化のサポート: ベクトル長 2
   リマーク #15309: ベクトル化のサポート: 正規化されたベクトル化のオーバーヘッド 2.000
   リマーク #15300: ループがベクトル化されました。
   リマーク #15442: すべてのループは剰余ループとして実行されます。
   リマーク #15449: マスクなしアライン・ユニット・ストライド・ストア: 1 
   リマーク #15452: マスクなしストライドロード: 1 
   リマーク #15475: --- ベクトルのコストサマリー開始 ---
   リマーク #15476: スカラーのコスト: 5 
   リマーク #15477: ベクトルのコスト: 2.500 
   リマーク #15478: スピードアップの期待値: 1.960 
   リマーク #15488: --- ベクトルのコストサマリー終了 ---
ループの終了

ループの開始 F:\ct-rec\src\cbp_thread_int.c(178,2)
<ベクトル化の剰余ループ>
ループの終了

    レポート: コード生成の最適化 [cg]

F:\ct-rec\src\cbp_thread_int.c(132,1):リマーク #34051: レジスター割り当て: [InitCBP] F:\ct-rec\src\cbp_thread_int.c:132

    ハードウェア・レジスター
        予約済み         :    2[ rsp rip]
        利用可能         :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        呼び出し先セーブ :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        割り当て済み     :   23[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm5 zmm10 zmm15]
        
    ルーチンの一時変数
        合計             :     297
            グローバル   :     140
            ローカル     :     157
        再生成           :      15
        退避             :      32
        
    ルーチンスタック
        変数             :       0 バイト*
            読み取り     :       0 [0.00e+000 ~ 0.0%]
            書き込み     :       0 [0.00e+000 ~ 0.0%]
        退避             :     208 バイト*
            読み取り     :      52 [7.74e+000 ~ 1.1%]
            書き込み     :      32 [8.08e+000 ~ 1.1%]
    
    注
    
        *オーバーラップしない変数と退避はスタック空間を共有できるため、
         合計スタックサイズはこれよりも小さくなる可能性があります。
    

===========================================================================
